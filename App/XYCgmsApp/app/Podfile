# Podfile
# CocoaPods 插件源
source 'https://github.com/CocoaPods/Specs.git'

# 启用 Swift 动态框架
use_frameworks!

# 隐藏所有 CocoaPods 警告
inhibit_all_warnings!

# 关闭 deterministic UUIDs（便于版本控制查看差异）
install! 'cocoapods', :deterministic_uuids => false


# ================== 配置常量 ==================
# 主工程路径（请根据实际情况调整）
MAIN_PROJECT_NAME = 'XYCgmsApp'
MAIN_PROJECT_PATH = "./#{MAIN_PROJECT_NAME}.xcodeproj"

# 基础路径映射
LIB_ROOT = '~/Desktop/XYLib/'
PATHS = {
  basic:  	  LIB_ROOT + 'Basic/',
  server: 	  LIB_ROOT + 'Server/',
  tool:   	  LIB_ROOT + 'Tool/',
  business: 	LIB_ROOT + 'Business/',
  third:  	  LIB_ROOT + 'Third/'
}


# ================== 动态获取主工程平台版本 ==================
require 'xcodeproj'

def get_deployment_target(project, platform_symbol, target_key)
  project.targets.each do |target|
    if target.platform_name == platform_symbol
      config = target.build_configurations.first
      return config.build_settings[target_key] if config
    end
  end
  nil
end

ios_deployment_target = nil
watchos_deployment_target = nil

begin
  main_project = Xcodeproj::Project.open(MAIN_PROJECT_PATH)

  ios_deployment_target = get_deployment_target(main_project, :ios, 'IPHONEOS_DEPLOYMENT_TARGET')
  watchos_deployment_target = get_deployment_target(main_project, :watchos, 'WATCHOS_DEPLOYMENT_TARGET')

rescue => e
  puts "⚠️ 无法打开主工程 #{MAIN_PROJECT_PATH}，使用默认部署目标: #{e.message}"
end

# 设置默认值（若未获取到）
ios_deployment_target ||= '26.0'
watchos_deployment_target ||= '26.0'

puts "📱 iOS Deployment Target: #{ios_deployment_target}"
puts "⌚️ watchOS Deployment Target: #{watchos_deployment_target}"


# ================== 依赖库 ==================
# 公共依赖库
def comPod
  
  # Basic
  pod 'XYExtension', :path => PATHS[:basic] + 'XYExtension/'

  # Server
  pod 'XYLog',             :path => PATHS[:server] + 'XYLog/'
  pod 'XYCoreBluetooth',   :path => PATHS[:server] + 'XYCoreBluetooth/'
  pod 'XYWatchConnectivity', :path => PATHS[:server] + 'XYWatchConnectivity/'
  pod 'XYStorage',         :path => PATHS[:server] + 'XYStorage/'
  pod 'XYNetwork',         :path => PATHS[:server] + 'XYNetwork/'

  # Tool
  pod 'XYUtil',            :path => PATHS[:tool] + 'XYUtil/'

  # Server

  # Business
  pod 'XYApp',            :path => PATHS[:business] + 'XYApp/'
  pod 'XYUser',           :path => PATHS[:business] + 'XYUser/'
  
  # Third
#  pod 'MTBleCore',         :path => PATHS[:third] + 'MTBleCore/'
  
end

# iOS独有的依赖库
def iOSPod
  # Basic

  # Server

  # Tool

  # Server
  
  # Business

  # Third
  
end

# watchOS独有的依赖库
def watchOSPod
  # Basic

  # Server

  # Tool

  # Server
  
  # Business

  # Third
  
end


# ================== iOS Targets ==================
target 'iOSApp' do
  platform :ios, ios_deployment_target

  comPod
  iOSPod

  target 'iOSAppTests' do
    inherit! :search_paths
  end

  target 'iOSAppUITests' do
    inherit! :search_paths
  end
end



# ================== watchOS Targets ==================
target 'watchOSApp' do
  platform :watchos, watchos_deployment_target

  comPod
  watchOSPod

  target 'watchOSAppTests' do
    inherit! :search_paths
  end

  target 'watchOSAppUITests' do
    inherit! :search_paths
  end
end


# ================== 安装后处理：同步主工程构建设置 ==================
post_install do |installer|
  begin
    main_project = Xcodeproj::Project.open(MAIN_PROJECT_PATH)
    main_target = main_project.targets.first

    if main_target.nil?
      puts "⚠️ 主工程无有效 target，跳过 build settings 同步"
      return
    end

    main_config = main_target.build_configurations.first
    main_archs = main_config.build_settings['ARCHS']
    main_valid_archs = main_config.build_settings['VALID_ARCHS']

    # 遍历所有 Pods target
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # 同步 deployment target
        case target.platform_name
        when :ios
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_deployment_target
        when :watchos
          config.build_settings['WATCHOS_DEPLOYMENT_TARGET'] = watchos_deployment_target
        end

        # 同步架构设置（如果存在）
        if main_archs
          config.build_settings['ARCHS'] = main_archs
        end
        if main_valid_archs
          config.build_settings['VALID_ARCHS'] = main_valid_archs
        end

        # 推荐：明确指定 build active architecture only
        config.build_settings['ONLY_ACTIVE_ARCH'] = main_config.build_settings['ONLY_ACTIVE_ARCH'] || 'YES'
      end
    end

    # 保存 Pods 项目
    installer.pods_project.save()

    puts "✅ Pods 项目已成功更新并同步构建设置"

  rescue => e
    puts "⚠️ post_install 阶段发生错误: #{e.message}"
  end
end
